/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * BLOCKCHAIN HALAL PLATFORM MODEL
 * Model dalam file ini menjelaskan beberapa hal berikut : 
 * - 
 */
namespace org.prototype.blockchainhalal
/**
 * Produk halal proses sertifikasi nya : 
 * 1. Ada BPJPH & MUI --> REGULATOR 
 * 2. Ada Lembaga Penyelenggara Halal --> melakukan sertifikasi 
 * 3. Ada Auditor Halal --> 
 */

/** 
 * AKTOR 1 : REGULATOR ( MUI / BPJPH / MUI REGIONAL)
 * Deskripsi Aktor : Regulator merupakan organisasi / lembaga yang dapat melakukan issue id * untuk dapat mengakses sistem
 * Identifikasi berdasarkan email untuk id 
 */


participant Regulator identified by RegulatorEmail {
  o String RegulatorEmail
  o String RegulatorName
  o String RegulatorBranch
  o String RegulatorAddress
  o String RegulatorContact
}

/** 
 * PARTICIPANT : ALL COMPANIES
 */
abstract participant Company identified by CompanyEmail {
  o String CompanyEmail 
  o String CompanyName 
  o String CompanyDesc
  o String CompanyAddress
  o String CompanyContact
}

participant SupplyCompany extends Company {
}

participant ManufacturingCompany extends Company {
}

participant DistributionCompany extends Company {
}

participant RetailCompany extends Company {
}

/**
 * ASSET : PRODUCT 
 * 
 */

abstract asset Product identified by productID {
  o String productID  
  --> Company CurrentOwner 
  o String productName   
  o String productDesc 
  o ProductType productTypes 
  o ProductStatus productStatus
  o String productionLocation 
  o DateTime productionDate 
  o DateTime expirationDate 
  o String certificateLink 
  o MeasuringUnit measuringUnit 
  o Integer unitCount 
  o ProductOwnershipHistory[] productHistory optional
 
  // added variable but unsure 
  // o boolean isHalal or maybe o String StatusHalal
}


/** 
 * ASSET : RAW PRODUCT 
 */
asset RawProduct extends Product{
  
}

/** 
 * ASSET :PROC PRODUCT  
 */
asset ProcProduct extends Product{
  --> Product[] composition
}

/**
*	ASSET : PACKAGE
*/

asset Package identified by packageID {
  o String packageID 
  o String packageName
  o String packageStatus
  --> Company packageOwner
  --> Product[] productList
}

/**
 * CONCEPT : OWNERSHIP HISTORY 
 * 
 */
concept ProductOwnershipHistory {
  --> Company owner 
  o DateTime timestamp
  o String desc
}


/**
 * ENUMERATION PRODUCT TYPE 
 * menjelaskan jenis produk yang dapat dilacak dalam
 */
enum ProductType{
  o AnimalProduct // ex : eggs, milk, cheese, yogurt, etc
  o Vegetables 
  o Fruits 
  o Meats
  o Grains //beans included here 
  o Beverages
  o Dish 
  o PackagedProduct
}

/**
*   Product Status dibuat berdasarkan breakdown state yang ada dari product journey berikut 
*   Pembuatan produk mentah (created-->Owned) --> pengolahan produk mentah (processed) --> packagingproduct (packaged)
*   --> proses pengiriman (in_transit) --> penerimaan produk perusahaan lain (received) --> penolakan product (reject) or  setuju
*   penerimaan (owned) --> product terjual (sold) --> product expired (expired)
*/
enum ProductStatus {
  o Created         // at the first point of product creation 
  o Expired         // at the end of product lifetime
  o Processed       // if the product become an ingredients to other product
  o Packaged        // if the product is prepared to being sent to other participant
  o In_Transit      // if the product is already out from the sender but not yet accepted by receiver 
  o Received        // if the product is already received from the sender 
  o Owned           // if the product is not created by the company, but is owned by the Company
  o Sold            // if the product already reach end user 
}
  
// Possible status for a package
enum PackageStatus {
  o Created 
  o Sent 
  o Unpacked // there still no function that cater this
  o Received
  o Owned
}

// Measuring Unit for a product
enum MeasuringUnit {
  // Weight based unit
  o Grams
  o Kilograms
  o Tons
  o Lbs
  o Pound

  // Volume Based unit 
  o miliLiter // mililiter
  o Liter
  o centimetercubic
  o metercubic
  o gallons
}


/**
 * THIS SECTION DEFINES TRANSACTION THAT CAN HAPPEN IN BLOCKCHAIN 
 * LIST OF TRANSACTION : 
 * 1. Create Raw Product 
 * 2. Create PRocessed Product 
 * 3. Create Companies
 * 4. 
 */

transaction CreateRawProduct {
  o String productID
  o String productName
  o String productDesc
  o String productionLocation
  o DateTime productionDate
  o DateTime expirationDate
  o ProductType productTypes 
  o MeasuringUnit measuringUnit
  o Integer unitCount
  o String certificateLink
}
  


transaction CreateProcProduct {
    o String productID
  o String productName
  o String productDesc
  o ProductStatus productStatus
  o String productionLocation
  o DateTime productionDate
  o DateTime expirationDate
  o ProductType productTypes
  --> Product[] composition
  o String certificateLink
  o MeasuringUnit measuringUnit
  o Integer unitCount
}

transaction CreatePackage {
  o String packageID
 o String packageName
 --> Product[] productList
}

//== IMPLEMENTED UNTIL THIS LINE

transaction SendPackage {
 --> Package shippedPackage
 --> Company newOwner
 o String shipmentMessage
}


transaction ReceivePackage {
 --> Package shippedPackage
}
  
transaction UnpackPackage{
  --> Package shippedPackage
}

transaction SellProduct {
  --> Product productSold
}
// below these can only be done after the above loc is firm

transaction BreakProduct {
 --> Product breakedProduct
 o String newProductID
 o Integer dispatchedUnitCount
  o String dispatchMessage
}

transaction Init{
}

// Create many product at once 

